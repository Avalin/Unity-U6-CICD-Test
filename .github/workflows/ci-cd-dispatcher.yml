name: ⚙️ CI/CD Dispatcher (Public)

on:
  # Allow manual dispatch with a buildType input
  workflow_dispatch:
    inputs:
      buildType:
        description: "Build type: 'preview' for manual/dev builds, 'release_candidate' for staging (e.g., v1.2.3-rc.1), 'release' for production (e.g., v1.2.3)"
        required: true
        default: "preview"
        type: choice
        options:
          - preview
          - release_candidate
          - release
      skipTests:
        description: "Whether tests should be skipped"
        required: true
        default: "default"
        type: choice
        options:
          - 'default'
          - 'true'
          - 'false'
      deployTargets:
        description: "JSON array of deploy targets (e.g. [\"itch.io\",\"s3\"])"
        required: true
        default: '["gh-pages"]'
        type: string
      buildTargets:
        description: "JSON array of build targets (e.g. [\"WebGL\",\"iOS\"])"
        required: true
        default: '["WebGL"]'
        type: string
      buildVersion:
        description: Optional version override
        type: string
        required: false
  # Automatically run tests & builds on certain branches or PR changes
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'            # matches v1.2.3
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'  # matches v1.2.3-rc.1
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
      - 'Tests/**'
  pull_request:
    types: [ready_for_review, synchronize, reopened]
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
      - 'Tests/**'

permissions:
  contents: write
  pull-requests: write

jobs:
  skip_ci:
    name: Check Skip CI triggers
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check last commit for [skip ci]   
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" == *"[skip ci]"* || "$COMMIT_MSG" == *"[ci skip]"* ]]; then
            echo "Skipping CI as requested."
            echo "should_run=false" >> "$GITHUB_OUTPUT"
          else
            echo "Proceeding with CI."
            echo "should_run=true" >> "$GITHUB_OUTPUT"
          fi

  validate_repository_inputs:
    name: Validate Repository Inputs
    needs: skip_ci
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    uses: avalin/unity-ci-templates/.github/workflows/validate-repository-inputs.yml@main
    with:
      requiredVariables: |
        [
          "PROJECT_NAME",
          "DEPLOY_TARGETS",
          "BUILD_TARGETS"
        ]
    secrets:
      CICD_PAT: ${{ secrets.CICD_PAT }}
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

  prepare_metadata:
    name: Prepare Metadata
    needs: 
      - skip_ci
      - validate_repository_inputs
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    uses: avalin/unity-ci-templates/.github/workflows/prepare-metadata.yml@main
    with:
      unityVersion: ${{ vars.UNITY_VERSION }}
      projectName: ${{ vars.PROJECT_NAME }}
      skipTests: ${{ inputs.skipTests }}
      deployTargets: ${{ inputs.deployTargets }}
      buildTargets: ${{ inputs.buildTargets }}
      buildType: ${{ inputs.buildType }}
      buildVersion: ${{ inputs.buildVersion }}

  tagging:
    name: Create or Verify Tag
    needs: 
      - skip_ci
      - prepare_metadata
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    uses: avalin/unity-ci-templates/.github/workflows/build-version-tagger.yml@main
    with:
      buildType: ${{ needs.prepare_metadata.outputs.buildType }}
      buildVersion: ${{ needs.prepare_metadata.outputs.buildVersion }}
    secrets: inherit
  
  trigger_ci:
    name: Trigger CI/CD Pipeline
    needs: 
      - skip_ci
      - tagging
      - prepare_metadata
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Call CI/CD Pipeline from GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.CICD_PAT }}
        run: |
          gh workflow run ci-cd-pipeline.yml \
            --ref "${{ github.ref }}" \
            --field buildTargets="$(printf '%s' '${{ needs.prepare_metadata.outputs.buildTargets }}')" \
            --field validDeployTargets="$(printf '%s' '${{ needs.prepare_metadata.outputs.validDeployTargets }}')" \
            --field metadataConfig="$(jq -c -n \
              --arg projectName "${{ needs.prepare_metadata.outputs.projectName }}" \
              --arg skipTests "${{ needs.prepare_metadata.outputs.skipTests }}" \
              --arg testsOnly "${{ needs.prepare_metadata.outputs.testsOnly }}" \
              --arg buildType "${{ needs.prepare_metadata.outputs.buildType }}" \
              --arg buildVersion "${{ needs.prepare_metadata.outputs.buildVersion }}" \
              --arg retentionDays "${{ needs.prepare_metadata.outputs.retentionDays }}" \
              --arg timeoutMinutesTests "${{ needs.prepare_metadata.outputs.timeoutMinutesTests }}" \
              --arg timeoutMinutesBuild "${{ needs.prepare_metadata.outputs.timeoutMinutesBuild }}" \
              '{projectName: $projectName, skipTests: $skipTests, testsOnly: $testsOnly, buildType: $buildType, buildVersion: $buildVersion, retentionDays: $retentionDays, timeoutMinutesTests: $timeoutMinutesTests, timeoutMinutesBuild: $timeoutMinutesBuild}')" \
            --field artifactConfig="$(jq -c -n \
              --arg requiresCombined "${{ needs.prepare_metadata.outputs.requiresCombined }}" \
              --arg skipPerBuildTarget "${{ needs.prepare_metadata.outputs.skipPerBuildTarget }}" \
              '{requiresCombined: $requiresCombined, skipPerBuildTarget: $skipPerBuildTarget}')" \
            --field testDataConfig="$(jq -c -n \
              --arg unityVersion "${{ needs.prepare_metadata.outputs.unityVersion }}" \
              --arg useGitLfs "${{ needs.prepare_metadata.outputs.useGitLfs }}" \
              --arg editModePath "${{ needs.prepare_metadata.outputs.editModePath }}" \
              --arg playModePath "${{ needs.prepare_metadata.outputs.playModePath }}" \
              --arg quietMode "${{ needs.prepare_metadata.outputs.quietMode }}" \
              '{unityVersion: $unityVersion, useGitLfs: $useGitLfs, editModePath: $editModePath, playModePath: $playModePath, quietMode: $quietMode}')"
